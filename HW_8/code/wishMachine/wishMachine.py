from pwn import ELF, u32, process
import ctypes
import sys

elf = ELF('./wishMachine')

io = process('./wishMachine')

serials = []

fibonacci = { 1: 0, 1: 1, 2: 2, 3: 3, 5: 4, 8: 5, 13: 6, 21: 7, 34: 8, 55: 9, 89: 10, 144: 11, 233: 12, 377: 13, 610: 14, 987: 15, 1597: 16, 2584: 17, 4181: 18, 6765: 19, 10946: 20, 17711: 21, 28657: 22, 46368: 23, 75025: 24, 121393: 25, 196418: 26, 317811: 27, 514229: 28, 832040: 29, 1346269: 30, 2178309: 31, 3524578: 32, 5702887: 33, 9227465: 34, 14930352: 35, 24157817: 36, 39088169: 37, 63245986: 38, 102334155: 39, 165580141: 40, 267914296: 41, 433494437: 42, 701408733: 43, 1134903170: 44, 1836311903: 45, 2971215073: 46, 512559680: 47, 3483774753: 48, 3996334433: 49, 3185141890: 50, 2886509027: 51, 1776683621: 52, 368225352: 53, 2144908973: 54, 2513134325: 55, 363076002: 56, 2876210327: 57, 3239286329: 58, 1820529360: 59, 764848393: 60, 2585377753: 61, 3350226146: 62, 1640636603: 63, 695895453: 64, 2336532056: 65, 3032427509: 66, 1073992269: 67, 4106419778: 68, 885444751: 69, 696897233: 70, 1582341984: 71, 2279239217: 72, 3861581201: 73, 1845853122: 74, 1412467027: 75, 3258320149: 76, 375819880: 77, 3634140029: 78, 4009959909: 79, 3349132642: 80, 3064125255: 81, 2118290601: 82, 887448560: 83, 3005739161: 84, 3893187721: 85, 2603959586: 86, 2202180011: 87, 511172301: 88, 2713352312: 89, 3224524613: 90, 1642909629: 91, 572466946: 92, 2215376575: 93, 2787843521: 94, 708252800: 95, 3496096321: 96, 4204349121: 97, 3405478146: 98, 3314859971: 99, 2425370821: 100, 1445263496: 101, 3870634317: 102, 1020930517: 103, 596597538: 104, 1617528055: 105, 2214125593: 106, 3831653648: 107, 1750811945: 108, 1287498297: 109, 3038310242: 110, 30841243: 111, 3069151485: 112, 3099992728: 113, 1874176917: 114, 679202349: 115, 2553379266: 116, 3232581615: 117, 1490993585: 118, 428607904: 119, 1919601489: 120, 2348209393: 121, 4267810882: 122, 2321052979: 123, 2293896565: 124, 319982248: 125, 2613878813: 126, 2933861061: 127}

count = 0
for _ in range(1000):
    serial = bytearray(70)
    i = 0
    while i < 70:
        data = elf.read(0x6d5100 + count * 40, 40)
        base = u32(data[0:4])
        offset = u32(data[16:20])
        index = u32(data[20:24])
        check_num = u32(data[24:28])
        func_addr = base + offset
        magics = [u32(data[j : j + 4]) for j in range(28, 40, 4)]
        if func_addr == 0x400fbe:
            for j in range(check_num):
                char = magics[j] // 135
                serial[index + j] = char
        elif func_addr == 0x40102d:
            for j in range(check_num):
                char = (magics[j] // 13 * 2) + ((magics[j] % 13) // 11)
                serial[index + j] = char
        elif func_addr == 0x4011d6:
            for j in range(check_num):
                char = fibonacci[magics[j]]
                serial[index + j] = char
        elif func_addr == 0x4010c8:
            for j in range(check_num):
                char = magics[j] ^ 0x52756279
                serial[index + j] = char
                    
        elif func_addr == 0x401138:
            for j in range(check_num):
                total = -ctypes.c_int32(magics[j]).value - 88035316
                char = (total // 30720 * 2) + (total % 30720) // 30600
                serial[index + j] = char
        i += check_num
        count += 1

    serial = bytes(serial)
    io.sendline(serial)
    serials.append(serial)

io.interactive()
